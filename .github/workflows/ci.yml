name: Node.js CI/CD with Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Kodu Çek
        uses: actions/checkout@v4

      - name: 🟢 Node.js Kurulumu
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Bağımlılıkları Yükle
        run: npm ci

      - name: 🧹 Linter Çalıştır
        run: npm run lint

      - name: 🔨 Docker Buildx Kurulumu
        uses: docker/setup-buildx-action@v3

      - name: 🗄️ Docker Katmanlarını Önbelleğe Al
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.ref_name }}-${{ hashFiles('Dockerfile', 'package-lock.json') }}
          restore-keys: |
            buildx-${{ github.ref_name }}-
            buildx-

      - name: 🔑 Docker Hub'a Giriş Yap
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Docker İmajını Oluştur ve İt
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:latest
            ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Kodu Çek
        uses: actions/checkout@v4

      - name: 🟢 Node.js Kurulumu
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Bağımlılıkları Yükle
        run: npm ci

      - name: 🧪 Testleri Çalıştır ve Kapsam Raporu Oluştur
        run: npm test -- --coverage

      - name: 📊 Kapsam Raporunu Yükle
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

      - name: 🔑 Docker Hub'a Giriş Yap
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🧪 Docker Konteynerinde Testleri Çalıştır
        run: docker run --rm ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:latest npm test

  security:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - name: 🚀 Kodu Çek
        uses: actions/checkout@v4

      - name: 🟢 Node.js Kurulumu
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Bağımlılıkları Yükle
        run: npm ci

      - name: 🔍 CodeQL Başlat
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: 🔍 CodeQL Analizi Yap
        uses: github/codeql-action/analyze@v3

      - name: 🔍 Güvenlik Denetimi Yap
        run: npm audit --audit-level=critical

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🚀 Kodu Çek
        uses: actions/checkout@v4

      - name: 🔑 Docker Hub'a Giriş Yap
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🐳 Docker Compose Kurulumu
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: 🚀 Test Ortamına Docker Compose ile Dağıt
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker-compose -f docker-compose.test.yml pull
          docker-compose -f docker-compose.test.yml up -d
          sleep 10 # Konteynerlerin başlaması için bekle
          docker-compose -f docker-compose.test.yml ps
